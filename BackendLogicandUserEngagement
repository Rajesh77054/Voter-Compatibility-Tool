// Improvements to server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
const stripe = require('stripe')('your_stripe_secret_key');
const helmet = require('helmet');  // Add security headers

const app = express();
const port = process.env.PORT || 3000;

// Middleware
app.use(bodyParser.json());
app.use(cors());
app.use(helmet());  // Security middleware

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/voterCandidateTool', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

// Example: Schema validation
// /voter-candidate-tool/backend/server.js

const CampaignSchema = new mongoose.Schema({
    campaignName: { type: String, required: true },
    viewCount: { type: Number, default: 0 },
    plan: { type: String, default: 'freemium' },
    viewLimit: { type: Number, default: 200 },
    customization: {
        sliders: [{ label: String, min: Number, max: Number }],  // Array of custom sliders
        colorScheme: { type: String, default: '#000000' },  // Hex code for color scheme
        font: { type: String, default: 'Arial' },  // Font style
        logoUrl: { type: String },  // Path to uploaded logo
        successMessage: { type: String, default: 'Thank you for using our tool!' },  // Custom success message
        resultDescription: { type: String, default: 'You are aligned with the candidate!' }  // Custom result description
    }
});

const Campaign = mongoose.model('Campaign', CampaignSchema);

// Route: Create payment session (Stripe integration - complete implementation)
app.post('/campaign/:id/upgrade', async (req, res) => {
    try {
        const campaign = await Campaign.findById(req.params.id);
        if (!campaign) return res.status(404).send('Campaign not found');

        const session = await stripe.checkout.sessions.create({
            payment_method_types: ['card'],
            line_items: [{
                price_data**Language > Specialist**: Node.js > Backend Development Specialist  
**Includes**: `express`, `mongoose`, `body-parser`, `cors`, `stripe`  
**Requirements**: Ensure completeness, functionality, and good code structure for the backend. Verify API routes, MongoDB integration, and Stripe payments.

## Plan
1. **Check Express and Middleware Setup**: Confirm correct use of `express`, `body-parser`, `cors`.
2. **Database Connection**: Verify MongoDB connection and schema definitions.
3. **API Endpoints**: Ensure the `/campaign/:id/view`, `/candidate/:id`, and payment routes work as intended.
4. **Stripe Integration**: Review the payment upgrade API.
5. **General Enhancements**: Ensure error handling and clean code practices.

---

### Review Notes

1. **Express Setup**:  
   The `express` setup includes middleware for `body-parser` and `cors`. This is standard for handling JSON requests and enabling cross-origin requests from the frontend.  
   ✅ **No issues found.**

2. **MongoDB Integration**:  
   Mongoose connects using `mongodb://localhost:27017/voterCandidateTool`, and schemas for `Campaign`, `Candidate`, and `UserInteraction` are correctly defined.  
   **Improvements**:
   - Consider adding schema validation for more robust data integrity (e.g., `required: true` for key fields like `name` in `CandidateSchema`).
   - Use `mongoose.Schema.Types.ObjectId` for `candidateId` in `UserInteractionSchema` for better referencing.

3. **API Routes**:
   - **/campaign/:id/view**: Correctly increments view count and checks view limits.  
   - **/candidate/:id**: Fetches candidate data, but ensure that the `id` is a valid MongoDB object ID before querying the database.  
   **Improvements**:
   - Add middleware for validating IDs before database queries to prevent errors like malformed object IDs.
   - Ensure `error.message` returns a user-friendly response on API errors.

4. **Stripe Payment Integration**:  
   **/campaign/:id/upgrade**:  
   The Stripe integration is present but incomplete (`price_data` part was cut off). Ensure this section is completed, including:
   - Setting the correct price data for the payment.
   - Handling success and failure of the payment process and updating the `plan` in the `Campaign` schema accordingly.
   
5. **General Enhancements**:
   - **Error Handling**: Add better error handling mechanisms and use `next()` in async routes to propagate errors to a global error handler.
   - **Async Await Structure**: Async operations (like `findById`, `save`) are handled correctly.
   - **Security**: Consider using `helmet` middleware to add security headers.

### Suggested Changes
```javascript
// Improvements to server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
const stripe = require('stripe')('your_stripe_secret_key');
const helmet = require('helmet');  // Add security headers

const app = express();
const port = process.env.PORT || 3000;

// Middleware
app.use(bodyParser.json());
app.use(cors());
app.use(helmet());  // Security middleware

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/voterCandidateTool', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

// Example: Schema validation
const CampaignSchema = new mongoose.Schema({
    campaignName: { type: String, required: true },
    viewCount: { type: Number, default: 0 },
    plan: { type: String, default: 'freemium' },
    viewLimit: { type: Number, default: 200 }
});

const Campaign = mongoose.model('Campaign', CampaignSchema);

// Route: Create payment session (Stripe integration - complete implementation)
app.post('/campaign/:id/upgrade', async (req, res) => {
    try {
        const campaign = await Campaign.findById(req.params.id);
        if (!campaign) return res.status(404).send('Campaign not found');

        const session = await stripe.checkout.sessions.create({
            payment_method_types: ['card'],
            line_items: [{
                price_ {
                    currency: 'usd',
                    product_data**Language > Specialist**: Node.js > Backend Development Specialist  
**Includes**: `express`, `mongoose`, `body-parser`, `cors`, `stripe`  
**Requirements**: Ensure completeness, functionality, and good code structure for the backend. Verify API routes, MongoDB integration, and Stripe payments.

## Plan
1. **Check Express and Middleware Setup**: Confirm correct use of `express`, `body-parser`, `cors`.
2. **Database Connection**: Verify MongoDB connection and schema definitions.
3. **API Endpoints**: Ensure the `/campaign/:id/view`, `/candidate/:id`, and payment routes work as intended.
4. **Stripe Integration**: Review the payment upgrade API.
5. **General Enhancements**: Ensure error handling and clean code practices.

---

### Review Notes

1. **Express Setup**:  
   The `express` setup includes middleware for `body-parser` and `cors`. This is standard for handling JSON requests and enabling cross-origin requests from the frontend.  
   ✅ **No issues found.**

2. **MongoDB Integration**:  
   Mongoose connects using `mongodb://localhost:27017/voterCandidateTool`, and schemas for `Campaign`, `Candidate`, and `UserInteraction` are correctly defined.  
   **Improvements**:
   - Consider adding schema validation for more robust data integrity (e.g., `required: true` for key fields like `name` in `CandidateSchema`).
   - Use `mongoose.Schema.Types.ObjectId` for `candidateId` in `UserInteractionSchema` for better referencing.

3. **API Routes**:
   - **/campaign/:id/view**: Correctly increments view count and checks view limits.  
   - **/candidate/:id**: Fetches candidate data, but ensure that the `id` is a valid MongoDB object ID before querying the database.  
   **Improvements**:
   - Add middleware for validating IDs before database queries to prevent errors like malformed object IDs.
   - Ensure `error.message` returns a user-friendly response on API errors.

4. **Stripe Payment Integration**:  
   **/campaign/:id/upgrade**:  
   The Stripe integration is present but incomplete (`price_data` part was cut off). Ensure this section is completed, including:
   - Setting the correct price data for the payment.
   - Handling success and failure of the payment process and updating the `plan` in the `Campaign` schema accordingly.
   
5. **General Enhancements**:
   - **Error Handling**: Add better error handling mechanisms and use `next()` in async routes to propagate errors to a global error handler.
   - **Async Await Structure**: Async operations (like `findById`, `save`) are handled correctly.
   - **Security**: Consider using `helmet` middleware to add security headers.

### Suggested Changes
```javascript
// Improvements to server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
const stripe = require('stripe')('your_stripe_secret_key');
const helmet = require('helmet');  // Add security headers

const app = express();
const port = process.env.PORT || 3000;

// Middleware
app.use(bodyParser.json());
app.use(cors());
app.use(helmet());  // Security middleware

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/voterCandidateTool', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

// Example: Schema validation
const CampaignSchema = new mongoose.Schema({
    campaignName: { type: String, required: true },
    viewCount: { type: Number, default: 0 },
    plan: { type: String, default: 'freemium' },
    viewLimit: { type: Number, default: 200 }
});

const Campaign = mongoose.model('Campaign', CampaignSchema);

// Route: Create payment session (Stripe integration - complete implementation)
app.post('/campaign/:id/upgrade', async (req, res) => {
    try {
        const campaign = await Campaign.findById(req.params.id);
        if (!campaign) return res.status(404).send('Campaign not found');

        const session = await stripe.checkout.sessions.create({
            payment_method_types: ['card'],
            line_items: [{
                price_ {
                    currency: 'usd',
                    product_ { name: campaign.campaignName },
                    unit_amount: 5000  // Example price in cents
                },
                quantity: 1
            }],
            mode: 'payment',
            success_url: `${req.headers.origin}/success?session_id={CHECKOUT_SESSION_ID}`,
            cancel_url: `${req.headers.origin}/cancel`,
        });

        res.json({ id: session.id });
    } catch (error) {
        res.status(500).send(error.message);
    }
});

// Start the server
app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});

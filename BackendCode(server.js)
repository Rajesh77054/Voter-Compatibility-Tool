// backend/server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const session = require('express-session');
const bcrypt = require('bcrypt');
const app = express();
const port = 3000;

// Middleware
app.use(bodyParser.json());
app.use(session({ secret: 'your_secret', resave: false, saveUninitialized: true }));

// Database Connection
mongoose.connect('mongodb://localhost:27017/yourdbname', { useNewUrlParser: true, useUnifiedTopology: true });

// User Schema
const userSchema = new mongoose.Schema({
  username: String,
  password: String,
});

const User = mongoose.model('User', userSchema);

// API Endpoints
app.post('/api/register', async (req, res) => {
  const { username, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({ username, password: hashedPassword });
  await user.save();
  res.sendStatus(201);
});

app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;
  const user = await User.findOne({ username });
  if (user && await bcrypt.compare(password, user.password)) {
    req.session.userId = user._id;
    res.sendStatus(200);
  } else {
    res.sendStatus(401);
  }
});

// Sliders Configuration
app.post('/api/sliders', (req, res) => {
  // Logic to save sliders configuration
});

// Start Server
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});

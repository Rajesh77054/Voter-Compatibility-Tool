// /voter-candidate-tool/backend/server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors'); // Enable CORS for frontend requests

const app = express();
const port = process.env.PORT || 3000;

app.use(bodyParser.json());
app.use(cors()); // Allow CORS

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/voterCandidateTool', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

// Define schema for campaigns
const CampaignSchema = new mongoose.Schema({
    campaignName: String,
    viewCount: { type: Number, default: 0 }, // Track views
    plan: { type: String, default: 'freemium' }, // Track payment plan (freemium, paid)
    viewLimit: { type: Number, default: 200 } // Default view limit for freemium
});

const Campaign = mongoose.model('Campaign', CampaignSchema);

// API route to increment view count for a campaign
app.post('/campaign/:id/view', async (req, res) => {
    try {
        const campaign = await Campaign.findById(req.params.id);
        if (!campaign) return res.status(404).send('Campaign not found');

        // Check if campaign has exceeded the view limit
        if (campaign.viewCount >= campaign.viewLimit) {
            return res.status(403).send('View limit reached. Please upgrade your plan.');
        }

        // Increment the view count
        campaign.viewCount += 1;
        await campaign.save();
        res.status(200).send({ viewCount: campaign.viewCount });
    } catch (error) {
        res.status(500).send(error.message);
    }
});

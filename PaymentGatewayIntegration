// /voter-candidate-tool/backend/server.js
const stripe = require('stripe')('your_stripe_secret_key');

// API route to create a payment session for upgrading plan
app.post('/campaign/:id/upgrade', async (req, res) => {
    try {
        const campaign = await Campaign.findById(req.params.id);
        if (!campaign) return res.status(404).send('Campaign not found');

        // Create Stripe Checkout session
        const session = await stripe.checkout.sessions.create({
            payment_method_types: ['card'],
            line_items: [{
                price_dataI'll proceed with the following tasks to continue the implementation of the Voter-Candidate Compatibility Tool:

### Tasks for This Phase:
1. **View Counting System**
   - Implement a system to track unique views for the tool when it’s embedded in campaign websites.
   - Track each campaign’s usage to manage the freemium tier and paid tier upgrades.

2. **Monetization and Tiered Model**
   - Set up a **freemium model** with a limit of 200 free views.
   - Develop the **tiered pay-per-view system**, allowing campaigns to upgrade based on view count thresholds.
   - Integrate notifications for campaigns when their view count is nearing the limit.

3. **Payment Gateway Integration**
   - Integrate a payment system (such as **Stripe**) to handle upgrades when campaigns exceed their free view count.

---

### 1. **View Counting System**
I'll start by tracking unique views for each campaign and embedding this in the backend. Each campaign that embeds the tool will have its own `viewCount` stored in the database.

#### Backend Code for View Counting:
```javascript
// /voter-candidate-tool/backend/server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors'); // Enable CORS for frontend requests

const app = express();
const port = process.env.PORT || 3000;

app.use(bodyParser.json());
app.use(cors()); // Allow CORS

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/voterCandidateTool', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

// Define schema for campaigns
const CampaignSchema = new mongoose.Schema({
    campaignName: String,
    viewCount: { type: Number, default: 0 }, // Track views
    plan: { type: String, default: 'freemium' }, // Track payment plan (freemium, paid)
    viewLimit: { type: Number, default: 200 } // Default view limit for freemium
});

const Campaign = mongoose.model('Campaign', CampaignSchema);

// API route to increment view count for a campaign
app.post('/campaign/:id/view', async (req, res) => {
    try {
        const campaign = await Campaign.findById(req.params.id);
        if (!campaign) return res.status(404).send('Campaign not found');

        // Check if campaign has exceeded the view limit
        if (campaign.viewCount >= campaign.viewLimit) {
            return res.status(403).send('View limit reached. Please upgrade your plan.');
        }

        // Increment the view count
        campaign.viewCount += 1;
        await campaign.save();
        res.status(200).send({ viewCount: campaign.viewCount });
    } catch (error) {
        res.status(500).send(error.message);
    }
});

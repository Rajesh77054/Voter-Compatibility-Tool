// frontend/src/services/news.js
const API_URL = process.env.REACT_APP_API_URL;
const PREFERRED_SOURCES = [
    'reuters',
    'ap',
    'politico',
    'npr',
    'guardian',
    'bbc-news',
    'abc-news',
    'cbs-news',
    'nbc-news'
];

const newsService = {
    getNews: async (topic, position) => {
        try {
            console.log('Frontend service - Starting request');
            console.log('API URL:', API_URL);
            
            const params = {
                access_key: process.env.REACT_APP_MEDIASTACK_KEY,
                categories: 'general,business,-sports,-entertainment,-technology,-health,-science',
                sources: PREFERRED_SOURCES.join(','), // Explicit source list
                keywords: `politics ${topic}`,
                countries: 'us',
                languages: 'en',
                sort: 'published_desc',
                limit: 10 // Increase limit to get more results
            };
            console.log('Request params:', params);

            const response = await fetch(`${API_URL}/api/news`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(params)
            });
            console.log('Frontend received response:', response.status);
            console.log('MediaStack response status:', response.status);
            console.log('Response headers:', Object.fromEntries(response.headers));

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('Frontend parsed data:', data);
            
            // Filter and prioritize preferred sources
            const filteredNews = data.data
                .filter(article => PREFERRED_SOURCES.includes(article.source))
                .slice(0, 3); // Return top 3 articles

            return filteredNews;
        } catch (error) {
            console.error('Frontend service error:', error);
            throw error;
        }
    }
};

export default newsService;